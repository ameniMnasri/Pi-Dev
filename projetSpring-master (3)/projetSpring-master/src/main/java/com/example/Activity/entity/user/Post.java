package com.example.Activity.entity.user;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a Post made by a user in the application.
 */
@Entity
@Table(name = "posts")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Post {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;

    // Use Lob for potentially large text content
    @Lob
    @Column(nullable = false, columnDefinition = "TEXT")
    private String content;

    // Many posts can be created by one user
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User author;

    // One post can have many comments
    // CascadeType.ALL: If a post is deleted, associated comments are also deleted.
    // OrphanRemoval=true: If a comment is removed from the list, it's deleted from the DB.
    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Comment> comments = new ArrayList<>();

    // One post can have many votes
    // CascadeType.ALL: If a post is deleted, associated votes are also deleted.
    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Vote> votes = new ArrayList<>();

    // Keep track of vote counts directly on the post for efficiency
    @Column(nullable = false, columnDefinition = "int default 0")
    private int upvoteCount = 0;

    @Column(nullable = false, columnDefinition = "int default 0")
    private int downvoteCount = 0;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    // Convenience method to add a comment
    public void addComment(Comment comment) {
        comments.add(comment);
        comment.setPost(this);
    }

    // Convenience method to remove a comment
    public void removeComment(Comment comment) {
        comments.remove(comment);
        comment.setPost(null);
    }

    // Convenience method to add a vote
    public void addVote(Vote vote) {
        votes.add(vote);
        vote.setPost(this);
        // Update counts when adding a vote
        if (vote.getVoteType() == VoteType.UPVOTE) {
            this.upvoteCount++;
        } else if (vote.getVoteType() == VoteType.DOWNVOTE) {
            this.downvoteCount++;
        }
    }

    // Convenience method to remove a vote (e.g., when a user changes their vote)
    // Note: This requires finding the specific vote to remove.
    // The VoteService will typically handle the logic of finding and removing/updating votes.
    public void removeVote(Vote vote) {
        if (votes.remove(vote)) {
            vote.setPost(null);
            // Update counts when removing a vote
            if (vote.getVoteType() == VoteType.UPVOTE) {
                this.upvoteCount--;
            } else if (vote.getVoteType() == VoteType.DOWNVOTE) {
                this.downvoteCount--;
            }
        }
    }

    // --- Getters, Setters, Constructors (Generated by Lombok) ---
    // Note: Explicit getters/setters might be needed if you have custom logic,
    // but Lombok handles the basic ones.
}
