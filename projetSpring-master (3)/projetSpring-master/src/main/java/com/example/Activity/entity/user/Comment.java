package com.example.Activity.entity.user;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a Comment made by a user on a Post or as a reply to another Comment.
 */
@Entity
@Table(name = "comments")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Comment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Use Lob for potentially large text content
    @Lob
    @Column(nullable = false, columnDefinition = "TEXT")
    private String content;

    // Many comments can be made by one user
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User author;

    // Many comments belong to one post
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "post_id", nullable = false)
    private Post post;

    // Self-referencing relationship for replies (nested comments)
    // A comment can have one parent comment (or null if it's a top-level comment)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_comment_id") // Nullable allows top-level comments
    private Comment parentComment;

    // A comment can have many replies
    // CascadeType.ALL: If a comment is deleted, its replies are also deleted.
    @OneToMany(mappedBy = "parentComment", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Comment> replies = new ArrayList<>();

    // One comment can have many votes
    // CascadeType.ALL: If a comment is deleted, associated votes are also deleted.
    @OneToMany(mappedBy = "comment", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Vote> votes = new ArrayList<>();

    // Keep track of vote counts directly on the comment for efficiency
    @Column(nullable = false, columnDefinition = "int default 0")
    private int upvoteCount = 0;

    @Column(nullable = false, columnDefinition = "int default 0")
    private int downvoteCount = 0;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    // Convenience method to add a reply
    public void addReply(Comment reply) {
        replies.add(reply);
        reply.setParentComment(this);
        reply.setPost(this.getPost()); // Ensure reply is linked to the same post
    }

    // Convenience method to remove a reply
    public void removeReply(Comment reply) {
        replies.remove(reply);
        reply.setParentComment(null);
    }

    // Convenience method to add a vote
    public void addVote(Vote vote) {
        votes.add(vote);
        vote.setComment(this);
        // Update counts when adding a vote
        if (vote.getVoteType() == VoteType.UPVOTE) {
            this.upvoteCount++;
        } else if (vote.getVoteType() == VoteType.DOWNVOTE) {
            this.downvoteCount++;
        }
    }

    // Convenience method to remove a vote
    public void removeVote(Vote vote) {
        if (votes.remove(vote)) {
            vote.setComment(null);
            // Update counts when removing a vote
            if (vote.getVoteType() == VoteType.UPVOTE) {
                this.upvoteCount--;
            } else if (vote.getVoteType() == VoteType.DOWNVOTE) {
                this.downvoteCount--;
            }
        }
    }
    // --- Getters, Setters, Constructors (Generated by Lombok) ---
}
